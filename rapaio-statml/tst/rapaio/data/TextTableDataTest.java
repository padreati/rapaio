/*
 * Apache License
 * Version 2.0, January 2004
 * http://www.apache.org/licenses/
 *
 *    Copyright 2013 Aurelian Tutuianu
 *    Copyright 2014 Aurelian Tutuianu
 *    Copyright 2015 Aurelian Tutuianu
 *    Copyright 2016 Aurelian Tutuianu
 *    Copyright 2017 Aurelian Tutuianu
 *    Copyright 2018 Aurelian Tutuianu
 *    Copyright 2019 Aurelian Tutuianu
 *    Copyright 2020 Aurelian Tutuianu
 *    Copyright 2021 Aurelian Tutuianu
 *    Copyright 2022 Aurelian Tutuianu
 *    Copyright 2023 Aurelian Tutuianu
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
 */

package rapaio.data;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Random;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import rapaio.core.distributions.Normal;
import rapaio.datasets.Datasets;
import rapaio.printer.Format;
import rapaio.printer.TextTable;

public class TextTableDataTest {

    private Random random;

    @BeforeEach
    void beforeEach() {
        random = new Random(123);
    }

    @Test
    void testSimple() {
        Frame iris = Datasets.loadIrisDataset().mapRows(0, 1, 2, 50, 51, 52, 100, 101, 102);
        TextTable tt = TextTable.empty(iris.rowCount() + 1, iris.varCount() + 1);
        for (int i = 0; i < iris.varCount(); i++) {
            tt.set(0, i + 1, iris.rvar(i).name(), 1);
        }
        for (int i = 0; i < iris.rowCount(); i++) {
            tt.set(i + 1, 0, i + ".", 1);
        }
        for (int i = 0; i < iris.rowCount(); i++) {
            for (int j = 0; j < iris.varCount(); j++) {
                tt.set(i + 1, j + 1, iris.getLabel(i, j), 1);
            }
        }
        String rawText = tt.getRawText();
        Assertions.assertEquals("""
                   sepal-length sepal-width petal-length petal-width      class\s
                0.          5.1         3.5          1.4         0.2     setosa\s
                1.          4.9         3.0          1.4         0.2     setosa\s
                2.          4.7         3.2          1.3         0.2     setosa\s
                3.          7.0         3.2          4.7         1.4 versicolor\s
                4.          6.4         3.2          4.5         1.5 versicolor\s
                5.          6.9         3.1          4.9         1.5 versicolor\s
                6.          6.3         3.3          6.0         2.5  virginica\s
                7.          5.8         2.7          5.1         1.9  virginica\s
                8.          7.1         3.0          5.9         2.1  virginica\s
                """, rawText);
    }

    @Test
    void testDynamic() {
        VarNominal headerCol = VarNominal.empty().name("header col");
        VarDouble x1 = VarDouble.empty().name("x1");
        VarDouble x2 = VarDouble.empty().name("x2");
        VarDouble x3 = VarDouble.empty().name("x1");

        Normal normal = Normal.of(0, 20);
        for (int i = 0; i < 30; i++) {
            headerCol.addLabel(randomString());
            x1.addDouble(normal.sampleNext(random));
            x2.addDouble(normal.sampleNext(random));
            x3.addDouble(normal.sampleNext(random));
        }

        TextTable tt = TextTable.empty(headerCol.size() + 1, 4, 1, 1);
        tt.set(0, 0, headerCol.name(), 0);
        tt.set(0, 1, x1.name(), 0);
        tt.set(0, 2, x2.name(), 0);
        tt.set(0, 3, x3.name(), 0);

        for (int i = 0; i < headerCol.size(); i++) {
            tt.set(i + 1, 0, headerCol.getLabel(i), 0);
            tt.set(i + 1, 1, Format.floatFlex(x1.getDouble(i)), 0, '.');
            tt.set(i + 1, 2, Format.floatFlex(x2.getDouble(i)), 0, '.');
            tt.set(i + 1, 3, Format.floatFlex(x3.getDouble(i)), 0, '.');
        }

        assertEquals("""
                header col     x1     \s
                  999999   -10.3975897\s
                  989997    11.4228522\s
                  979799     5.1848768\s
                  989898   -26.7227345\s
                  989799    -0.0068314\s
                  989897    -3.0649885\s
                  979798   -24.3172998\s
                  979999    10.1338974\s
                  979897    15.1330668\s
                  999897    12.8722178\s
                  979898     6.2702582\s
                  989997    36.3624695\s
                  979797   -10.9652756\s
                  979997     3.3390545\s
                  989898     8.453027 \s
                  989799   -10.3517055\s
                  999898    -0.7302866\s
                  979798   -29.5404927\s
                  979999    41.3615705\s
                  979797     3.1042482\s
                  979797   -18.1822648\s
                  979997    18.9428089\s
                  989899    -8.5881503\s
                  999797    16.2451777\s
                  989998     7.7186976\s
                  989798   -41.1261094\s
                  999898    41.7470811\s
                  999797   -22.1976789\s
                  999999    34.9367874\s
                  999897   -24.7709022\s

                header col     x2     \s
                  999999     3.7379485\s
                  989997   -29.2332262\s
                  979799   -15.672808 \s
                  989898    -3.8095887\s
                  989799    41.4251087\s
                  989897   -16.0310845\s
                  979798    20.6345505\s
                  979999     9.1530262\s
                  979897    -4.2091832\s
                  999897    31.3450903\s
                  979898    -7.5640252\s
                  989997    11.9810382\s
                  979797   -16.4312454\s
                  979997     0.7376601\s
                  989898    18.9186874\s
                  989799    -2.6925228\s
                  999898   -23.1653109\s
                  979798    -0.646863 \s
                  979999    12.3816197\s
                  979797    21.04082  \s
                  979797    -8.4855522\s
                  979997    12.2610176\s
                  989899   -14.9328976\s
                  999797    -9.8161122\s
                  989998     5.8388153\s
                  989798   -14.839929 \s
                  999898   -23.9164675\s
                  999797    -3.5516805\s
                  999999     8.7091984\s
                  999897    -5.4354875\s

                header col     x1     \s
                  999999   -12.935949 \s
                  989997    16.5667972\s
                  979799    -2.0997226\s
                  989898    22.947924 \s
                  989799    16.9617833\s
                  989897     5.8062882\s
                  979798   -20.1644745\s
                  979999     6.5726676\s
                  979897   -17.8997236\s
                  999897    18.7648089\s
                  979898   -19.1781901\s
                  989997    -8.5143005\s
                  979797    -2.1162765\s
                  979997   -20.338834 \s
                  989898   -20.4969131\s
                  989799    12.7701972\s
                  999898    -6.1167291\s
                  979798   -18.7265816\s
                  979999    15.5546356\s
                  979797   -25.4420671\s
                  979797   -21.6472563\s
                  979997    15.2371083\s
                  989899    26.8589865\s
                  999797   -39.6465554\s
                  989998   -21.0344345\s
                  989798   -20.9578747\s
                  999898   -31.8052   \s
                  999797    14.5710563\s
                  999999    16.6328341\s
                  999897    30.2430254\s

                """, tt.getText(1));

        assertEquals("""
                header col     x1          x2     \s
                  999999   -10.3975897   3.7379485\s
                  989997    11.4228522 -29.2332262\s
                  979799     5.1848768 -15.672808 \s
                  989898   -26.7227345  -3.8095887\s
                  989799    -0.0068314  41.4251087\s
                  989897    -3.0649885 -16.0310845\s
                  979798   -24.3172998  20.6345505\s
                  979999    10.1338974   9.1530262\s
                  979897    15.1330668  -4.2091832\s
                  999897    12.8722178  31.3450903\s
                  979898     6.2702582  -7.5640252\s
                  989997    36.3624695  11.9810382\s
                  979797   -10.9652756 -16.4312454\s
                  979997     3.3390545   0.7376601\s
                  989898     8.453027   18.9186874\s
                  989799   -10.3517055  -2.6925228\s
                  999898    -0.7302866 -23.1653109\s
                  979798   -29.5404927  -0.646863 \s
                  979999    41.3615705  12.3816197\s
                  979797     3.1042482  21.04082  \s
                  979797   -18.1822648  -8.4855522\s
                  979997    18.9428089  12.2610176\s
                  989899    -8.5881503 -14.9328976\s
                  999797    16.2451777  -9.8161122\s
                  989998     7.7186976   5.8388153\s
                  989798   -41.1261094 -14.839929 \s
                  999898    41.7470811 -23.9164675\s
                  999797   -22.1976789  -3.5516805\s
                  999999    34.9367874   8.7091984\s
                  999897   -24.7709022  -5.4354875\s

                header col     x1     \s
                  999999   -12.935949 \s
                  989997    16.5667972\s
                  979799    -2.0997226\s
                  989898    22.947924 \s
                  989799    16.9617833\s
                  989897     5.8062882\s
                  979798   -20.1644745\s
                  979999     6.5726676\s
                  979897   -17.8997236\s
                  999897    18.7648089\s
                  979898   -19.1781901\s
                  989997    -8.5143005\s
                  979797    -2.1162765\s
                  979997   -20.338834 \s
                  989898   -20.4969131\s
                  989799    12.7701972\s
                  999898    -6.1167291\s
                  979798   -18.7265816\s
                  979999    15.5546356\s
                  979797   -25.4420671\s
                  979797   -21.6472563\s
                  979997    15.2371083\s
                  989899    26.8589865\s
                  999797   -39.6465554\s
                  989998   -21.0344345\s
                  989798   -20.9578747\s
                  999898   -31.8052   \s
                  999797    14.5710563\s
                  999999    16.6328341\s
                  999897    30.2430254\s

                """, tt.getText(40));


        assertEquals("""
                header col     x1          x2          x1     \s
                  999999   -10.3975897   3.7379485 -12.935949 \s
                  989997    11.4228522 -29.2332262  16.5667972\s
                  979799     5.1848768 -15.672808   -2.0997226\s
                  989898   -26.7227345  -3.8095887  22.947924 \s
                  989799    -0.0068314  41.4251087  16.9617833\s
                  989897    -3.0649885 -16.0310845   5.8062882\s
                  979798   -24.3172998  20.6345505 -20.1644745\s
                  979999    10.1338974   9.1530262   6.5726676\s
                  979897    15.1330668  -4.2091832 -17.8997236\s
                  999897    12.8722178  31.3450903  18.7648089\s
                  979898     6.2702582  -7.5640252 -19.1781901\s
                  989997    36.3624695  11.9810382  -8.5143005\s
                  979797   -10.9652756 -16.4312454  -2.1162765\s
                  979997     3.3390545   0.7376601 -20.338834 \s
                  989898     8.453027   18.9186874 -20.4969131\s
                  989799   -10.3517055  -2.6925228  12.7701972\s
                  999898    -0.7302866 -23.1653109  -6.1167291\s
                  979798   -29.5404927  -0.646863  -18.7265816\s
                  979999    41.3615705  12.3816197  15.5546356\s
                  979797     3.1042482  21.04082   -25.4420671\s
                  979797   -18.1822648  -8.4855522 -21.6472563\s
                  979997    18.9428089  12.2610176  15.2371083\s
                  989899    -8.5881503 -14.9328976  26.8589865\s
                  999797    16.2451777  -9.8161122 -39.6465554\s
                  989998     7.7186976   5.8388153 -21.0344345\s
                  989798   -41.1261094 -14.839929  -20.9578747\s
                  999898    41.7470811 -23.9164675 -31.8052   \s
                  999797   -22.1976789  -3.5516805  14.5710563\s
                  999999    34.9367874   8.7091984  16.6328341\s
                  999897   -24.7709022  -5.4354875  30.2430254\s
                """, tt.getText(50));

        assertEquals("""
                header col     x1          x2          x1      header col     x1          x2          x1     \s
                  999999   -10.3975897   3.7379485 -12.935949    989799   -10.3517055  -2.6925228  12.7701972\s
                  989997    11.4228522 -29.2332262  16.5667972   999898    -0.7302866 -23.1653109  -6.1167291\s
                  979799     5.1848768 -15.672808   -2.0997226   979798   -29.5404927  -0.646863  -18.7265816\s
                  989898   -26.7227345  -3.8095887  22.947924    979999    41.3615705  12.3816197  15.5546356\s
                  989799    -0.0068314  41.4251087  16.9617833   979797     3.1042482  21.04082   -25.4420671\s
                  989897    -3.0649885 -16.0310845   5.8062882   979797   -18.1822648  -8.4855522 -21.6472563\s
                  979798   -24.3172998  20.6345505 -20.1644745   979997    18.9428089  12.2610176  15.2371083\s
                  979999    10.1338974   9.1530262   6.5726676   989899    -8.5881503 -14.9328976  26.8589865\s
                  979897    15.1330668  -4.2091832 -17.8997236   999797    16.2451777  -9.8161122 -39.6465554\s
                  999897    12.8722178  31.3450903  18.7648089   989998     7.7186976   5.8388153 -21.0344345\s
                  979898     6.2702582  -7.5640252 -19.1781901   989798   -41.1261094 -14.839929  -20.9578747\s
                  989997    36.3624695  11.9810382  -8.5143005   999898    41.7470811 -23.9164675 -31.8052   \s
                  979797   -10.9652756 -16.4312454  -2.1162765   999797   -22.1976789  -3.5516805  14.5710563\s
                  979997     3.3390545   0.7376601 -20.338834    999999    34.9367874   8.7091984  16.6328341\s
                  989898     8.453027   18.9186874 -20.4969131   999897   -24.7709022  -5.4354875  30.2430254\s
                """, tt.getText(100));

        assertEquals(
                """
                        header col     x1          x2          x1      header col     x1          x2          x1      header col     x1          x2          x1      header col     x1          x2          x1     \s
                          999999   -10.3975897   3.7379485 -12.935949    979897    15.1330668  -4.2091832 -17.8997236   999898    -0.7302866 -23.1653109  -6.1167291   989998     7.7186976   5.8388153 -21.0344345\s
                          989997    11.4228522 -29.2332262  16.5667972   999897    12.8722178  31.3450903  18.7648089   979798   -29.5404927  -0.646863  -18.7265816   989798   -41.1261094 -14.839929  -20.9578747\s
                          979799     5.1848768 -15.672808   -2.0997226   979898     6.2702582  -7.5640252 -19.1781901   979999    41.3615705  12.3816197  15.5546356   999898    41.7470811 -23.9164675 -31.8052   \s
                          989898   -26.7227345  -3.8095887  22.947924    989997    36.3624695  11.9810382  -8.5143005   979797     3.1042482  21.04082   -25.4420671   999797   -22.1976789  -3.5516805  14.5710563\s
                          989799    -0.0068314  41.4251087  16.9617833   979797   -10.9652756 -16.4312454  -2.1162765   979797   -18.1822648  -8.4855522 -21.6472563   999999    34.9367874   8.7091984  16.6328341\s
                          989897    -3.0649885 -16.0310845   5.8062882   979997     3.3390545   0.7376601 -20.338834    979997    18.9428089  12.2610176  15.2371083   999897   -24.7709022  -5.4354875  30.2430254\s
                          979798   -24.3172998  20.6345505 -20.1644745   989898     8.453027   18.9186874 -20.4969131   989899    -8.5881503 -14.9328976  26.8589865\s
                          979999    10.1338974   9.1530262   6.5726676   989799   -10.3517055  -2.6925228  12.7701972   999797    16.2451777  -9.8161122 -39.6465554\s
                        """,
                tt.getText(200));

        assertEquals(
                """
                        header col     x1          x2          x1      header col     x1          x2          x1      header col     x1          x2          x1      header col     x1          x2          x1      header col     x1          x2          x1     \s
                          999999   -10.3975897   3.7379485 -12.935949    979798   -24.3172998  20.6345505 -20.1644745   979797   -10.9652756 -16.4312454  -2.1162765   979999    41.3615705  12.3816197  15.5546356   989998     7.7186976   5.8388153 -21.0344345\s
                          989997    11.4228522 -29.2332262  16.5667972   979999    10.1338974   9.1530262   6.5726676   979997     3.3390545   0.7376601 -20.338834    979797     3.1042482  21.04082   -25.4420671   989798   -41.1261094 -14.839929  -20.9578747\s
                          979799     5.1848768 -15.672808   -2.0997226   979897    15.1330668  -4.2091832 -17.8997236   989898     8.453027   18.9186874 -20.4969131   979797   -18.1822648  -8.4855522 -21.6472563   999898    41.7470811 -23.9164675 -31.8052   \s
                          989898   -26.7227345  -3.8095887  22.947924    999897    12.8722178  31.3450903  18.7648089   989799   -10.3517055  -2.6925228  12.7701972   979997    18.9428089  12.2610176  15.2371083   999797   -22.1976789  -3.5516805  14.5710563\s
                          989799    -0.0068314  41.4251087  16.9617833   979898     6.2702582  -7.5640252 -19.1781901   999898    -0.7302866 -23.1653109  -6.1167291   989899    -8.5881503 -14.9328976  26.8589865   999999    34.9367874   8.7091984  16.6328341\s
                          989897    -3.0649885 -16.0310845   5.8062882   989997    36.3624695  11.9810382  -8.5143005   979798   -29.5404927  -0.646863  -18.7265816   999797    16.2451777  -9.8161122 -39.6465554   999897   -24.7709022  -5.4354875  30.2430254\s
                        """,
                tt.getText(10000000));
    }

    @Test
    void testFloat() {
        Normal normal = Normal.of(0, 10);
        Var x = VarDouble.from(5, () -> normal.sampleNext(random));
        x.addDouble(1);
        x.addDouble(-122682378);

        TextTable tt = TextTable.empty(x.size(), 1);
        for (int i = 0; i < x.size(); i++) {
            tt.set(i, 0, Format.floatFlex(x.getDouble(i)), 1, '.');
        }
        // integers with no dots are misaligned, this is why we need custom methods
        assertEquals("""
                     5.9229719\s
                    23.6147893\s
                    -6.6416266\s
                     2.7619375\s
                     8.6277539\s
                     1        \s
                -122,682,378  \s
                """, tt.getRawText());

        tt.set(4, 0, "left", ".right");
        tt.set(5, 0, "", ".34442");
        tt.set(6, 0, "-12", "");

        assertEquals("""
                   5.9229719\s
                  23.6147893\s
                  -6.6416266\s
                   2.7619375\s
                left.right  \s
                    .34442  \s
                 -12        \s
                """, tt.getRawText());
    }

    private String randomString() {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < 3; i++) {
            s.append('a' + random.nextInt('d' - 'a'));
        }
        return s.toString();
    }

}
