delimiters "<", ">"

import "java.stg"

unary_op(op) ::= <<
<licence()>

<pkg("rapaio.darray.operator.unary")>

<impnotif("jdk.incubator.vector.ByteVector",op.floatingPointOnly)>
<imp("jdk.incubator.vector.DoubleVector")>
<imp("jdk.incubator.vector.FloatVector")>
<imp("jdk.incubator.vector.VectorOperators")>
<impnotif("jdk.incubator.vector.IntVector", op.floatingPointOnly)>
<imp("rapaio.darray.Storage")>
<imp("rapaio.darray.iterators.StrideLoopDescriptor")>
<imp("rapaio.darray.operator.DArrayUnaryOp")>
<impif("rapaio.data.OperationNotAvailableException",op.floatingPointOnly)>
<\n>
// This code is generated automatically

public class <op.name> extends DArrayUnaryOp {

    public <op.name>() {
        super(<(op.floatingPointOnly)>);
    }

<if(op.floatingPointOnly)>
    @Override
    protected void applyUnitByte(StrideLoopDescriptor\<Byte\> loop, Storage s) {
        throw new OperationNotAvailableException();
    }

    @Override
    protected void applyStepByte(StrideLoopDescriptor\<Byte\> loop, Storage s) {
        throw new OperationNotAvailableException();
    }

    @Override
    protected void applyGenericByte(StrideLoopDescriptor\<Byte\> loop, Storage s) {
        throw new OperationNotAvailableException();
    }


    @Override
    protected void applyUnitInt(StrideLoopDescriptor\<Integer\> loop, Storage s) {
        throw new OperationNotAvailableException();
    }

    @Override
    protected void applyStepInt(StrideLoopDescriptor\<Integer\> loop, Storage s) {
        throw new OperationNotAvailableException();
    }

    @Override
    protected void applyGenericInt(StrideLoopDescriptor\<Integer\> loop, Storage s) {
        throw new OperationNotAvailableException();
    }
<else>
    @Override
    protected void applyUnitByte(StrideLoopDescriptor\<Byte\> loop, Storage s) {
        for (int p : loop.offsets) {
            int i = 0;
            for (; i \< loop.simdBound; i += loop.simdLen) {
                ByteVector a = s.getByteVector(p);
                <op.byteVectorOp>
                s.setByteVector(a, p);
                p += loop.simdLen;
            }
            for (; i \< loop.bound; i++) {
                byte a = s.getByte(p);
                <op.byteValueOp>
                s.setByte(p, a);
                p++;
            }
        }
    }

    @Override
    protected void applyStepByte(StrideLoopDescriptor\<Byte\> loop, Storage s) {
        for (int p : loop.offsets) {
            int i = 0;
            for (; i \< loop.simdBound; i += loop.simdLen) {
                var a = s.getByteVector(p, loop.simdOffsets(), 0);
                <op.byteVectorOp>
                s.setByteVector(a, p, loop.simdOffsets(), 0);
                p += loop.step * loop.simdLen;
            }
            for (; i \< loop.bound; i++) {
                byte a = s.getByte(p);
                <op.byteValueOp>
                s.setByte(p, a);
                p += loop.step;
            }
        }
    }

    @Override
    protected void applyGenericByte(StrideLoopDescriptor\<Byte\> loop, Storage s) {
        for (int p : loop.offsets) {
            for (int i = 0; i \< loop.bound; i++) {
                byte a = s.getByte(p);
                <op.byteValueOp>
                s.setByte(p, a);
                p += loop.step;
            }
        }
    }

    @Override
    protected void applyUnitInt(StrideLoopDescriptor\<Integer\> loop, Storage s) {
        for (int p : loop.offsets) {
            int i = 0;
            for (; i \< loop.simdBound; i += loop.simdLen) {
                IntVector a = s.getIntVector(p);
                <op.intVectorOp>
                s.setIntVector(a, p);
                p += loop.simdLen;
            }
            for (; i \< loop.bound; i++) {
                int a = s.getInt(p);
                <op.intValueOp>
                s.setInt(p, a);
                p++;
            }
        }
    }

    @Override
    protected void applyStepInt(StrideLoopDescriptor\<Integer\> loop, Storage s) {
        for (int p : loop.offsets) {
            int i = 0;
            for (; i \< loop.simdBound; i += loop.simdLen) {
                IntVector a = s.getIntVector(p, loop.simdOffsets(), 0);
                <op.intVectorOp>
                s.setIntVector(a, p, loop.simdOffsets(), 0);
                p += loop.step * loop.simdLen;
            }
            for (; i \< loop.bound; i++) {
                int a = s.getInt(p);
                <op.intValueOp>
                s.setInt(p, a);
                p += loop.step;
            }
        }
    }

    @Override
    protected void applyGenericInt(StrideLoopDescriptor\<Integer\> loop, Storage s) {
        for (int p : loop.offsets) {
            for (int i = 0; i \< loop.bound; i++) {
                int a = s.getInt(p);
                <op.intValueOp>
                s.setInt(p, a);
                p++;
            }
        }
    }
<endif>

    @Override
    protected void applyUnitFloat(StrideLoopDescriptor\<Float\> loop, Storage s) {
        for (int p : loop.offsets) {
            int i = 0;
            for (; i \< loop.simdBound; i += loop.simdLen) {
                FloatVector a = s.getFloatVector(p);
                <op.floatVectorOp>
                s.setFloatVector(a, p);
                p += loop.simdLen;
            }
            for (; i \< loop.bound; i++) {
                float a = s.getFloat(p);
                <op.floatValueOp>
                s.setFloat(p, a);
                p++;
            }
        }
    }

    @Override
    protected void applyStepFloat(StrideLoopDescriptor\<Float\> loop, Storage s) {
        for (int p : loop.offsets) {
            int i = 0;
            for (; i \< loop.simdBound; i += loop.simdLen) {
                FloatVector a = s.getFloatVector(p, loop.simdOffsets(), 0);
                <op.floatVectorOp>
                s.setFloatVector(a, p, loop.simdOffsets(), 0);
                p += loop.step * loop.simdLen;
            }
            for (; i \< loop.bound; i++) {
                float a = s.getFloat(p);
                <op.floatValueOp>
                s.setFloat(p, a);
                p += loop.step;
            }
        }
    }

    @Override
    protected void applyGenericFloat(StrideLoopDescriptor\<Float\> loop, Storage s) {
        for (int p : loop.offsets) {
            for (int i = 0; i \< loop.bound; i++) {
                float a = s.getFloat(p);
                <op.floatValueOp>
                s.setFloat(p, a);
                p += loop.step;
            }
        }
    }

    @Override
    protected void applyUnitDouble(StrideLoopDescriptor\<Double\> loop, Storage s) {
        for (int p : loop.offsets) {
            int i = 0;
            for (; i \< loop.simdBound; i += loop.simdLen) {
                DoubleVector a = s.getDoubleVector(p);
                <op.doubleVectorOp>
                s.setDoubleVector(a, p);
                p += loop.simdLen;
            }
            for (; i \< loop.bound; i++) {
                double a = s.getDouble(p);
                <op.doubleValueOp>
                s.setDouble(p, a);
                p++;
            }
        }
    }

    @Override
    protected void applyStepDouble(StrideLoopDescriptor\<Double\> loop, Storage s) {
        for (int p : loop.offsets) {
            int i = 0;
            for (; i \< loop.simdBound; i += loop.simdLen) {
                DoubleVector a = s.getDoubleVector(p, loop.simdOffsets(), 0);
                <op.doubleVectorOp>
                s.setDoubleVector(a, p, loop.simdOffsets(), 0);
                p += loop.step * loop.simdLen;
            }
            for (; i \< loop.bound; i++) {
                double a = s.getDouble(p);
                <op.doubleValueOp>
                s.setDouble(p, a);
                p += loop.step;
            }
        }
    }

    @Override
    protected void applyGenericDouble(StrideLoopDescriptor\<Double\> loop, Storage s) {
        for (int p : loop.offsets) {
            for (int i = 0; i \< loop.bound; i++) {
                double a = s.getDouble(p);
                <op.doubleValueOp>
                s.setDouble(p, a);
                p += loop.step;
            }
        }
    }
}
>>
