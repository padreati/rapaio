N <- 1000
x <- seq(1,N)
y <- log1p(x)
plot(x,y)
set.seed(123)
y <- y + rnorm(1)
plot(x,y)
y <- y + rnorm(1)
plot(x,y)
x <- seq(1,N)
y <- log1p(x) + rnorm(1)
set.seed(123)
x <- seq(1,N)
y <- log1p(x) + rnorm(1)
plot(x,y)
lines(x,y)
plot(x,y, type="l")
?rnorm
y <- log1p(x) + rnorm(1, mean = 0, sd = 1)
plot(x,y, type="l")
x <- seq(1,N)
y <- log1p(x) + rnorm(1, mean = 0, sd = 1)
plot(x,y, type="l")
y <- log1p(x) + rnorm(length(x), mean = 0, sd = 1)
plot(x,y, type="l")
y <- log1p(x) + rnorm(length(x), mean = 0, sd = 1)
plot(x,y, type="l")
set.seed(123)
x <- seq(1,N)
y <- log1p(x) + rnorm(length(x), mean = 0, sd = 1)
plot(x,y, type="l")
summary(lm(y~x))
lm1 <- lm(y~x)
lm1$fitted.values
lines(lm1$fitted.values)
lm1 <- lm(y~x+x^2)
lines(lm1$fitted.values)
lm1 <- lm(y~x+x^2)
summary(lm1)
lm1 <- lm(y~x+x^2)
summary(lm1)
x2 <- x^2
x2
lm1 <- lm(y~x+x2)
summary(lm1)
plot(x,y, type="l")
lines(lm1$fitted.values)
x <- runif()
n = 1000
x <- runif()
x <- runif(n)
x <- runif(n)
x <- runif(n)*400
y <- rnorm()
y <- rnorm(n, mean = 0, sd = 5) + x/4
plot(x, y, type="l")
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 5) + x/10
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10
y <- rnorm(n, mean = 0, sd = 3) + x/10 + log(x)*2
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10 + x^0.5*2
plot(x, y, type="p")
x <- runif(n)*400
y <- rnorm(n, mean = 0, sd = 3) + x/10 + x^0.5*2
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10 + x^2*2
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10 + x^2/1000
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10 + x^2/2000
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10 +ifelse(x>220, x^2/2000, 0)
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10 +ifelse(x>220, (x-220)^2/2000, 0)
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10 +ifelse(x>220, (x-220)^2.3/2000, 0)
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 3) + x/10 +ifelse(x>220, (x-220)^2.2/2000, 0)
plot(x, y, type="p")
y <- rnorm(n, mean = 0, sd = 7) + x/10 +ifelse(x>220, (x-220)^2.2/2000, 0)
plot(x, y, type="p")
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 +ifelse(x>220, (x-220)^2.2/2000, 0)
plot(x, y, type="p")
n = 500
x <- runif(n)*400
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 +ifelse(x>220, (x-220)^2.2/2000, 0)
plot(x, y, type="p")
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg")
abline(h = 200, color = "r")
abline(h = 200, col = "r")
abline(h = 200, col = 1)
abline(v = 200, col = 1)
abline(v = 200, col = 2)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = 1)
abline(v = 200, col = 2)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = 2)
abline(v = 200, col = 2)
pch <- ifelse(x>200, 2, 1)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch <- pch)
pch <- ifelse(x>200, 2, 1)
n = 500
x <- runif(n)*400
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 +ifelse(x>220, (x-220)^2.2/2000, 0)
pch <- ifelse(x>200, 2, 1)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch)
pch <- ifelse(x>200, 3, 1)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch)
col <- ifelse(x>200, 2, 1)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col)
col <- ifelse(x>200, 2, 3)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col)
abline(v = 200, col = 2)
abline(v = 200, col = 5)
x <- runif(n)*300
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 +ifelse(x>220, (x-220)^2.2/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 +ifelse(x>180, (x-180)^2.2/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
x <- runif(n)*270
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 +ifelse(x>180, (x-180)^2.2/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 +ifelse(x>180, (x-180)^2.3/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 +ifelse(x>180, (x-180)^2.4/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 + 4 + ifelse(x>180, (x-180)^2.4/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
y <- ifelse(x<100, rnorm(n, mean=0, sd=4), rnorm(n, mean = 0, sd = 7)) + x/10 + 10 + ifelse(x>180, (x-180)^2.4/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
y <- ifelse(x<100, rnorm(n, mean=0, sd=3), rnorm(n, mean = 0, sd = 6)) + x/10 + 10 + ifelse(x>180, (x-180)^2.4/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
y <- ifelse(x<100, rnorm(n, mean=0, sd=3), rnorm(n, mean = 0, sd = 5)) + x/10 + 10 + ifelse(x>180, (x-180)^2.4/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
set.seed(12344)
n = 500
x <- runif(n)*270
y <- ifelse(x<100, rnorm(n, mean=0, sd=3), rnorm(n, mean = 0, sd = 5)) + x/10 + 10 + ifelse(x>180, (x-180)^2.4/2000, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
y <- ifelse(x<100, rnorm(n, mean=0, sd=3), rnorm(n, mean = 0, sd = 5)) + x/10 + ifelse(x>180, (x-180)^2.4/2000 + 10, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(1234)
n = 500
x <- runif(n)*270
y <- ifelse(x<100, rnorm(n, mean=0, sd=3), rnorm(n, mean = 0, sd = 5)) + x/10 + ifelse(x>180, (x-180)^2.4/2000 + 10, 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
healthy <- y[x<=200]
unhealthy <- y[x>200]
plot(density(healthy))
density(unhealthy)
plot(density(unhealthy), add(T))
plot(density(healthy))
plot(density(unhealthy), add(T))
plot(density(unhealthy), add=T
plot(density(healthy))
plot(density(healthy))
plot(density(unhealthy), add=T)
plot(density(healthy))
lines(density(unhealthy))
plot(density(healthy))
lines(density(unhealthy))
plot(density(healthy), xlim=c(0, 100))
lines(density(unhealthy))
plot(density(healthy), xlim=c(-10, 100))
lines(density(unhealthy))
plot(density(healthy), xlim=c(-10, 110))
lines(density(unhealthy))
plot(density(healthy), xlim=c(-10, 110), col = 4)
lines(density(unhealthy), col = 2)
legend(legend = c("healthy", "unhealthy"))
legend(x = 80, y = 0.04, legend = c("healthy", "unhealthy"))
legend(x = 80, y = 0.04, legend = c("healthy", "unhealthy"), pch = 19)
legend(x = 80, y = 0.04, legend = c("healthy", "unhealthy"), pch = 19, col = c(4, 2))
legend(x = 70, y = 0.04, legend = c("healthy", "unhealthy"), pch = 19, col = c(4, 2))
plot(density(healthy), xlim=c(-10, 110), col = 4)
lines(density(unhealthy), col = 2)
legend(x = 70, y = 0.04, legend = c("healthy", "unhealthy"), pch = 19, col = c(4, 2))
plot(density(healthy), xlim=c(-10, 110), col = 4, xlabel = "", ylab = "", main = "estimated densities for healthy and unhealthy")
lines(density(unhealthy), col = 2)
legend(x = 70, y = 0.04, legend = c("healthy", "unhealthy"), pch = 19, col = c(4, 2))
plot(density(healthy), xlim=c(-10, 110), col = 4, xlab = "", ylab = "", main = "estimated densities for healthy and unhealthy")
lines(density(unhealthy), col = 2)
legend(x = 70, y = 0.04, legend = c("healthy", "unhealthy"), pch = 19, col = c(4, 2))
abline(h = 23)
abline(v = 23)
abline(v = 27)
abline(v = 24)
abline(v = 24.5)
abline(v = 24.3)
plot(density(healthy), xlim=c(-10, 110), col = 4, xlab = "", ylab = "", main = "estimated densities for healthy and unhealthy")
lines(density(unhealthy), col = 2)
legend(x = 70, y = 0.04, legend = c("healthy", "unhealthy"), pch = 19, col = c(4, 2))
abline(v = 24.3)
density(healthy)
dh <- density(healthy)
polygon(dh[dh$x>=24.3], col = 12)
polygon(dh[dh$x>=24.3,], col = 12)
polygon(dh[dh$x>=24.3], col = 12)
polygon(dh[dh>=24.3], col = 12)
dh
ABLINE(H = 0)
abline(h = 0)
pch <- ifelse(x>200, 3, 1)
col <- ifelse(x>200, 2, 4)
plot(x, y, type="p", xlab = "latency p90", ylab = "cpu load avg", pch = pch, col = col, main = "healthy vs unhealthy")
abline(v = 200, col = 5)
x <- rnorm(n = 1000, mean = 0, sd = 1)
plot(density(x))
plot(log(density(x))
plot(density(x))
plot(density(x))
plot(log(density(x)))
plot(density(log(x)))
plot(density(x))
plot(density(log(x)))
plot(density(log(x+100)))
plot(density(x))
plot(density(log(x+100)))
plot(density(x))
plot(density(log(x+10)))
plot(density(x))
plot(density(log(x+10)), col = 1)
plot(density(x), xlim = c(-10, 100))
plot(density(log(x+10)), col = 1)
lines(density(log(x+10)), col = 1)
plot(density(x), xlim = c(-10, 100))
lines(density(log(x+10)), col = 1)
lines(density(log(x+10) - log(10)), col = 1)
plot(density(x), xlim = c(-10, 100))
lines(density(log(x+10) - log(10)), col = 1)
density(x)
d <- density(x)
plot(d$x, exp(d$y/(1 + exp(d$y)),  xlim = c(-10, 100))
d <- density(x)
plot(d$x, exp(d$y/(1 + exp(d$y)),  xlim = c(-10, 100))
plot(d$x, exp(d$y)/(1 + exp(d$y)),  xlim = c(-10, 100))
plot(d$x, exp(d$y)/(1 + exp(d$y)),  xlim = c(-10, 100))
plot(d$x, exp(d$y)/(1 + exp(d$y)),  xlim = c(-10, 100), type ="l")
plot(d$x, exp(d$y)/(1 + exp(d$y)),  type ="l")
lines(d$x, d$y, col=2)
plot(d$x, exp(d$y)/(1 + exp(d$y)),  type ="l")
lines(d$x, d$y, col=2)
lines(d$y, col=2)
lines(d$y, col=2)
plot(d$x, exp(d$y)/(1 + exp(d$y)),  type ="l")
lines(d$y, col=2)
install.packages(c("caret", "shiny"))
df <- read.csv2(file = "/home/ati/data/nano/wide-data.csv", sep = ",", dec = ".", na.strings = "")
View(df)
str(df)
df <- read.csv2(file = "/home/ati/data/nano/wide-data.csv", sep = ",", dec = ".", na.strings = "", colClasses = c(rep("character", 3), rep("numeric", 602)))
str(df)
for(name in names(df)[4:ncol(df)]) {
df[,name] <- log1p(df[,name])
}
df <- df[,c(1,12:ncol(df))]
all <- unlist(df[,2:ncol(df)])
fs <- data.frame(gene=names(df)[2:ncol(df)])
for(i in 1:nrow(fs)) {
fs$mean[i] <- mean(df[,i+1])
fs$median[i] <- median(df[,i+1])
fs$iqr[i] <- IQR(df[,i+1])
fs$anova[i] <- anova(lm(df[,i+1]~df$type))$`Pr(>F)`[[1]]
}
View(fs)
View(fs)
iqr_threshold <- IQR(all)/6
sel <- subset(fs, iqr>=iqr_threshold & anova<=0.25)
xtr <- df[,sel$gene]
xtr <- xtr[, -1]
ytr <- df$type
for(c in names(xtr)) {
for(i in 1:nrow(xtr)) {
xtr[i,c] <- max(1, xtr[i,c])
}
}
View(xtr)
names(xtr)
df <- read.csv2(file = "/home/ati/data/nano/wide-data.csv", sep = ",", dec = ".", na.strings = "", colClasses = c(rep("character", 3), rep("numeric", 602)))
for(name in names(df)[4:ncol(df)]) {
df[,name] <- log1p(df[,name])
}
df <- df[,c(1,12:ncol(df))]
fs <- data.frame(gene=names(df)[2:ncol(df)])
for(i in 1:nrow(fs)) {
fs$mean[i] <- mean(df[,i+1])
fs$median[i] <- median(df[,i+1])
fs$iqr[i] <- IQR(df[,i+1])
fs$anova[i] <- anova(lm(df[,i+1]~df$type))$`Pr(>F)`[[1]]
}
for(i in 1:nrow(fs)) {
fs$mean[i] <- mean(df[,i+1])
fs$median[i] <- median(df[,i+1])
fs$iqr[i] <- IQR(df[,i+1])
fs$anova[i] <- anova(lm(df[,i+1]~df$type))$`Pr(>F)`[[1]]
}
iqr_threshold <- IQR(all)/6
sel <- subset(fs, iqr>=iqr_threshold & anova<=0.25)
sel <- subset(fs, iqr>=iqr_threshold & anova<=0.25)
xtr <- df[,sel$gene]
xtr <- xtr[, -1]
ytr <- df$type
for(c in names(xtr)) {
for(i in 1:nrow(xtr)) {
xtr[i,c] <- max(1, xtr[i,c])
}
}
View(xtr)
for(c in names(xtr)) {
for(i in 1:nrow(xtr)) {
xtr[i,c] <- max(1, xtr[i,c])
}
}
names(xtr)
df <- read.csv2(file = "/home/ati/data/nano/wide-data.csv", sep = ",", dec = ".", na.strings = "", colClasses = c(rep("character", 3), rep("numeric", 602)))
for(name in names(df)[4:ncol(df)]) {
df[,name] <- log1p(df[,name])
}
all <- unlist(df[,2:ncol(df)])
fs <- data.frame(gene=names(df)[2:ncol(df)])
for(i in 1:nrow(fs)) {
fs$mean[i] <- mean(df[,i+1])
fs$median[i] <- median(df[,i+1])
fs$iqr[i] <- IQR(df[,i+1])
fs$anova[i] <- anova(lm(df[,i+1]~df$type))$`Pr(>F)`[[1]]
}
iqr_threshold <- IQR(all)/10
sel <- subset(fs, iqr>=iqr_threshold & anova<=0.25)
xtr <- df[,sel$gene]
xtr <- xtr[, -1]
ytr <- df$type
for(c in names(xtr)) {
for(i in 1:nrow(xtr)) {
xtr[i,c] <- max(1, xtr[i,c])
}
}
for(c in names(xtr)) {
for(i in 1:nrow(xtr)) {
xtr[i,c] <- max(1, xtr[i,c])
}
}
names(xtr)
library(randomForest)
library(caret)
library(caret)
names(xtr)
rf2 <- randomForest(x = xtr, y = ytr, mtry = 46, ntree = 5000)
library(randomForest)
ytr <- df$type
library(randomForest)
library(caret)
rf2 <- randomForest(x = xtr, y = ytr, mtry = 46, ntree = 5000)
names(ytr)
ytr
df <- read.csv2(file = "/home/ati/data/nano/wide-data.csv", sep = ",", dec = ".", na.strings = "", colClasses = c(rep("factor", 3), rep("numeric", 602)))
for(name in names(df)[4:ncol(df)]) {
df[,name] <- log1p(df[,name])
}
df <- df[,c(1,12:ncol(df))]
all <- unlist(df[,2:ncol(df)])
fs <- data.frame(gene=names(df)[2:ncol(df)])
for(i in 1:nrow(fs)) {
fs$mean[i] <- mean(df[,i+1])
fs$median[i] <- median(df[,i+1])
fs$iqr[i] <- IQR(df[,i+1])
fs$anova[i] <- anova(lm(df[,i+1]~df$type))$`Pr(>F)`[[1]]
}
for(i in 1:nrow(fs)) {
fs$mean[i] <- mean(df[,i+1])
fs$median[i] <- median(df[,i+1])
fs$iqr[i] <- IQR(df[,i+1])
fs$anova[i] <- anova(lm(df[,i+1]~df$type))$`Pr(>F)`[[1]]
}
iqr_threshold <- IQR(all)/10
sel <- subset(fs, iqr>=iqr_threshold & anova<=0.25)
xtr <- df[,sel$gene]
xtr <- xtr[, -1]
xtr <- xtr[, -1]
ytr <- df$type
for(c in names(xtr)) {
for(i in 1:nrow(xtr)) {
xtr[i,c] <- max(1, xtr[i,c])
}
}
ytr
library(randomForest)
library(caret)
rf2 <- randomForest(x = xtr, y = ytr, mtry = 46, ntree = 5000)
rf2
imp2 <- as.data.frame(importance(rf2))
rf2 <- randomForest(x = xtr, y = ytr, mtry = 100, ntree = 10000)
rf2
imp2 <- as.data.frame(importance(rf2))
imp2$gene <- rownames(imp2)
imp2$gene
imp2[order(imp2$MeanDecreaseGini, decreasing = TRUE), ]
View(imp2)
View(imp2)
View(imp2)
rf2
summary(rf2)
str(rf2)
rf2
?dhyper
dhyper(1, 10, 20, 15)
dhyper(seq(1,15), 10, 20, 15)
plot(dhyper(seq(1,15), 10, 20, 15))
plot(dhyper(seq(1,100), 10, 10, 100))
plot(dhyper(seq(1,100), 10, 10, 100))
plot(dhyper(seq(1,100), 10, 10, 10))
plot(dhyper(seq(1,100), 10, 10, 10), type='y')
plot(dhyper(seq(1,100), 10, 10, 10), type='l')
plot(dhyper(seq(1,100, 0.01), 10, 10, 10), type='l')
plot(dhyper(seq(1,100, 0.01), 10, 10, 10), type='l')
plot(dhyper(seq(1,100, 0.01), 10, 10, 11), type='l')
plot(dhyper(seq(1,100, 0.01), 10, 10, 11), type='l')
plot(dhyper(seq(1,100, 0.01), 100, 100, 11), type='l')
plot(dhyper(seq(1,100, 0.01), 100, 100, 100), type='l')
plot(dhyper(seq(1,100, 0.01), 1000, 1000, 100), type='l')
plot(dhyper(seq(1,100, 0.01), 1000, 1000, 1000), type='l')
plot(dhyper(seq(1,100, 0.01), 1000, 1000, 1000), type='l')
warnings()
plot(dhyper(seq(1,100, 0.01), 100, 100, 100), type='l')
warnings()
df <- data.frame(x = seq(0, 100, 0.01))
setwd("/home/ati/work/rapaio/src/test/resources/rapaio/core/distributions")
df <- data.frame(x = seq(0, 100, 0.01))
df$pdf_0 <- dpois(df$x, 0)
df$cdf_0 <- ppois(df$x, 0)
df$q_0 <- qpois(df$x, 0)
df$pdf_1 <- dpois(df$x, 1)
df$cdf_1 <- ppois(df$x, 1)
df$q_1 <- qpois(df$x, 1)
df$pdf_10 <- dpois(df$x, 10)
df$cdf_10 <- ppois(df$x, 10)
df$q_10 <- qpois(df$x, 10)
df$pdf_100 <- dpois(df$x, 100)
df$cdf_100 <- ppois(df$x, 100)
df$q_100 <- qpois(df$x, 100)
write.table(format(df, digits=20), file = "pois.csv", col.names = TRUE, row.names = FALSE, sep = ",", quote = FALSE)
df <- data.frame(x = seq(0, 100, 0.01))
df$pdf_1 <- dpois(df$x, 1)
df$cdf_1 <- ppois(df$x, 1)
df$q_1 <- qpois(df$x, 1)
df$pdf_5 <- dpois(df$x, 5)
df$cdf_5 <- ppois(df$x, 5)
df$q_5 <- qpois(df$x, 5)
df$pdf_10 <- dpois(df$x, 10)
df$cdf_10 <- ppois(df$x, 10)
df$q_10 <- qpois(df$x, 10)
df$pdf_100 <- dpois(df$x, 100)
df$cdf_100 <- ppois(df$x, 100)
df$q_100 <- qpois(df$x, 100)
write.table(format(df, digits=20), file = "pois.csv", col.names = TRUE, row.names = FALSE, sep = ",", quote = FALSE)
qpois(0, 1)
qpois(0.01, 1)
qpois(0, 1)
df <- data.frame(x = seq(0, 100, 0.01))
df$pdf_1 <- dpois(df$x, 1)
df$cdf_1 <- ppois(df$x, 1)
df$q_1 <- qpois(df$x, 1)
df$pdf_5 <- dpois(df$x, 5)
df$cdf_5 <- ppois(df$x, 5)
df$q_5 <- qpois(df$x, 5)
df$pdf_10 <- dpois(df$x, 10)
df$cdf_10 <- ppois(df$x, 10)
df$q_10 <- qpois(df$x, 10)
df$pdf_100 <- dpois(df$x, 100)
df$cdf_100 <- ppois(df$x, 100)
df$q_100 <- qpois(df$x, 100)
write.table(format(df, digits=20), file = "pois.csv", col.names = TRUE, row.names = FALSE, sep = ",", quote = FALSE)
qpois(0, 0)
ppois(0, 0)
